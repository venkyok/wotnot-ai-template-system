name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test backend
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET_KEY: test-secret-key
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Add your test commands here
        python -m pytest tests/ || echo "No tests found"
  
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/app/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend/app
      run: npm ci
    
    - name: Lint frontend
      working-directory: ./frontend/app
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend/app
      run: npm run build
      env:
        VUE_APP_API_URL: https://your-backend-url.com
  
  deploy-backend:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    # Add your backend deployment steps here
    # Example for Railway:
    # - name: Deploy to Railway
    #   uses: railway/cli@v1
    #   with:
    #     token: ${{ secrets.RAILWAY_TOKEN }}
    #     command: up --service backend
  
  deploy-frontend:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    # Frontend deployment will be handled by Vercel automatically
    # when connected to GitHub repository
    - name: Deploy to Vercel
      run: echo "Frontend deployed via Vercel GitHub integration"